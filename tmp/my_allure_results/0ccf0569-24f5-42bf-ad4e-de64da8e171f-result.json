{"name": "test_alert", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: ev\nMessage: unexpected alert open: {Alert text : ev}\n  (Session info: chrome=113.0.5672.63)\nStacktrace:\n0   chromedriver                        0x000000010434b598 chromedriver + 4973976\n1   chromedriver                        0x0000000104342913 chromedriver + 4938003\n2   chromedriver                        0x0000000103effcd6 chromedriver + 470230\n3   chromedriver                        0x0000000103f74062 chromedriver + 946274\n4   chromedriver                        0x0000000103f67988 chromedriver + 895368\n5   chromedriver                        0x0000000103f3521f chromedriver + 688671\n6   chromedriver                        0x0000000103f3656e chromedriver + 693614\n7   chromedriver                        0x0000000104305bb7 chromedriver + 4688823\n8   chromedriver                        0x000000010430aa51 chromedriver + 4708945\n9   chromedriver                        0x000000010431140f chromedriver + 4736015\n10  chromedriver                        0x000000010430b91a chromedriver + 4712730\n11  chromedriver                        0x00000001042de87c chromedriver + 4528252\n12  chromedriver                        0x000000010432af28 chromedriver + 4841256\n13  chromedriver                        0x000000010432b0a7 chromedriver + 4841639\n14  chromedriver                        0x000000010433c28f chromedriver + 4911759\n15  libsystem_pthread.dylib             0x00007ff8077d01d3 _pthread_start + 125\n16  libsystem_pthread.dylib             0x00007ff8077cbbd3 thread_start + 15", "trace": "self = <allure_commons._allure.fixture object at 0x107a750d0>, args = (), kwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        self.parameters = func_parameters(self._fixture_function, *args, **kwargs)\n    \n        with self:\n>           return self._fixture_function(*args, **kwargs)\n\n../../tms_aqa/lib/python3.11/site-packages/allure_commons/_allure.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nconftest.py:20: in browser\n    driver.close()\n../../tms_aqa/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:551: in close\n    self.execute(Command.CLOSE)\n../../tms_aqa/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107a48f50>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"ev\"},\"error\":\"unexpected alert open\",\"message\":\"unexpected alert o...ff8077d01d3 _pthread_start + 125\\\\n16  libsystem_pthread.dylib             0x00007ff8077cbbd3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: ev\nE           Message: unexpected alert open: {Alert text : ev}\nE             (Session info: chrome=113.0.5672.63)\nE           Stacktrace:\nE           0   chromedriver                        0x000000010434b598 chromedriver + 4973976\nE           1   chromedriver                        0x0000000104342913 chromedriver + 4938003\nE           2   chromedriver                        0x0000000103effcd6 chromedriver + 470230\nE           3   chromedriver                        0x0000000103f74062 chromedriver + 946274\nE           4   chromedriver                        0x0000000103f67988 chromedriver + 895368\nE           5   chromedriver                        0x0000000103f3521f chromedriver + 688671\nE           6   chromedriver                        0x0000000103f3656e chromedriver + 693614\nE           7   chromedriver                        0x0000000104305bb7 chromedriver + 4688823\nE           8   chromedriver                        0x000000010430aa51 chromedriver + 4708945\nE           9   chromedriver                        0x000000010431140f chromedriver + 4736015\nE           10  chromedriver                        0x000000010430b91a chromedriver + 4712730\nE           11  chromedriver                        0x00000001042de87c chromedriver + 4528252\nE           12  chromedriver                        0x000000010432af28 chromedriver + 4841256\nE           13  chromedriver                        0x000000010432b0a7 chromedriver + 4841639\nE           14  chromedriver                        0x000000010433c28f chromedriver + 4911759\nE           15  libsystem_pthread.dylib             0x00007ff8077d01d3 _pthread_start + 125\nE           16  libsystem_pthread.dylib             0x00007ff8077cbbd3 thread_start + 15\n\n../../tms_aqa/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:244: UnexpectedAlertPresentException"}, "start": 1683570881692, "stop": 1683570883227, "uuid": "4f470fab-38e1-4ecb-9070-26242852465f", "historyId": "d32bd9c5cd60785bbf59e687d6d15251", "testCaseId": "bdfbe2425730cf3593956fbf2bda6187", "fullName": "self_practice.test_first#test_alert", "labels": [{"name": "parentSuite", "value": "self_practice"}, {"name": "suite", "value": "test_first"}, {"name": "host", "value": "MacBook-Pro-Evgenij.local"}, {"name": "thread", "value": "34121-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "self_practice.test_first"}]}