{"name": "test_upload", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : /Users/evgenijgravdin/Desktop/tms_aqa_python/sys_photo.jpeg\n  (Session info: chrome=113.0.5672.63)\nStacktrace:\n0   chromedriver                        0x0000000102998598 chromedriver + 4973976\n1   chromedriver                        0x000000010298f913 chromedriver + 4938003\n2   chromedriver                        0x000000010254ccd6 chromedriver + 470230\n3   chromedriver                        0x0000000102588900 chromedriver + 715008\n4   chromedriver                        0x00000001025b49c2 chromedriver + 895426\n5   chromedriver                        0x0000000102583e51 chromedriver + 695889\n6   chromedriver                        0x00000001025b4b7e chromedriver + 895870\n7   chromedriver                        0x00000001025cf856 chromedriver + 1005654\n8   chromedriver                        0x00000001025b4793 chromedriver + 894867\n9   chromedriver                        0x000000010258221f chromedriver + 688671\n10  chromedriver                        0x000000010258356e chromedriver + 693614\n11  chromedriver                        0x0000000102952bb7 chromedriver + 4688823\n12  chromedriver                        0x0000000102957a51 chromedriver + 4708945\n13  chromedriver                        0x000000010295e40f chromedriver + 4736015\n14  chromedriver                        0x000000010295891a chromedriver + 4712730\n15  chromedriver                        0x000000010292b87c chromedriver + 4528252\n16  chromedriver                        0x0000000102977f28 chromedriver + 4841256\n17  chromedriver                        0x00000001029780a7 chromedriver + 4841639\n18  chromedriver                        0x000000010298928f chromedriver + 4911759\n19  libsystem_pthread.dylib             0x00007ff8077d01d3 _pthread_start + 125\n20  libsystem_pthread.dylib             0x00007ff8077cbbd3 thread_start + 15", "trace": "self = <test_hw_AQA_3.TestDownloadUpload object at 0x107a54510>, browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"517e5548f85a974db4f6be83fdc53ca1\")>\n\n    def test_upload(self, browser):\n        helper = Helper(browser)\n        helper.driver.get(\"http://the-internet.herokuapp.com/upload\")\n        file_path = os.path.join(\n            current_dir, \"sys_photo.jpeg\"\n        )  # добавляем имя файла к текущему пути\n    \n        input_file = helper.get_locator_by_xpath(ElementsObject.input_file)\n        photo_path = os.path.abspath(file_path)  # выводим полный путь\n    \n>       input_file.send_keys(photo_path)\n\nhome_work/home_work_AQA_3/test_hw_AQA_3.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../tms_aqa/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../../tms_aqa/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:404: in _execute\n    return self._parent.execute(command, params)\n../../tms_aqa/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107b01b10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : /Users/ev...ff8077d01d3 _pthread_start + 125\\\\n20  libsystem_pthread.dylib             0x00007ff8077cbbd3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : /Users/evgenijgravdin/Desktop/tms_aqa_python/sys_photo.jpeg\nE         (Session info: chrome=113.0.5672.63)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000102998598 chromedriver + 4973976\nE       1   chromedriver                        0x000000010298f913 chromedriver + 4938003\nE       2   chromedriver                        0x000000010254ccd6 chromedriver + 470230\nE       3   chromedriver                        0x0000000102588900 chromedriver + 715008\nE       4   chromedriver                        0x00000001025b49c2 chromedriver + 895426\nE       5   chromedriver                        0x0000000102583e51 chromedriver + 695889\nE       6   chromedriver                        0x00000001025b4b7e chromedriver + 895870\nE       7   chromedriver                        0x00000001025cf856 chromedriver + 1005654\nE       8   chromedriver                        0x00000001025b4793 chromedriver + 894867\nE       9   chromedriver                        0x000000010258221f chromedriver + 688671\nE       10  chromedriver                        0x000000010258356e chromedriver + 693614\nE       11  chromedriver                        0x0000000102952bb7 chromedriver + 4688823\nE       12  chromedriver                        0x0000000102957a51 chromedriver + 4708945\nE       13  chromedriver                        0x000000010295e40f chromedriver + 4736015\nE       14  chromedriver                        0x000000010295891a chromedriver + 4712730\nE       15  chromedriver                        0x000000010292b87c chromedriver + 4528252\nE       16  chromedriver                        0x0000000102977f28 chromedriver + 4841256\nE       17  chromedriver                        0x00000001029780a7 chromedriver + 4841639\nE       18  chromedriver                        0x000000010298928f chromedriver + 4911759\nE       19  libsystem_pthread.dylib             0x00007ff8077d01d3 _pthread_start + 125\nE       20  libsystem_pthread.dylib             0x00007ff8077cbbd3 thread_start + 15\n\n../../tms_aqa/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: InvalidArgumentException"}, "start": 1683570841774, "stop": 1683570845541, "uuid": "8da16aa8-5d4f-4786-bc4b-d7fb4065a336", "historyId": "891f36361fd93899c66275f71aac24f5", "testCaseId": "496f7f820c94aaf5b900ee3aa25fc327", "fullName": "home_work.home_work_AQA_3.test_hw_AQA_3.TestDownloadUpload#test_upload", "labels": [{"name": "parentSuite", "value": "home_work.home_work_AQA_3"}, {"name": "suite", "value": "test_hw_AQA_3"}, {"name": "subSuite", "value": "TestDownloadUpload"}, {"name": "host", "value": "MacBook-Pro-Evgenij.local"}, {"name": "thread", "value": "34121-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "home_work.home_work_AQA_3.test_hw_AQA_3"}]}